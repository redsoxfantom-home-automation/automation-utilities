/*
   Helper tasks + classes for gradle builds
*/

// Checks to see if docker is available
def isDockerAvailable() {
   try {
      Runtime rt = Runtime.getRuntime()
      rt.exec('docker')
      return true;
   }
   catch(Exception ex) {
      return false;
   }
}

// Helper method to load a properties file (if it exists) and overwrite the given properties object
def loadProperties(propsFile,propertiesObj) {
   if(propsFile.exists()) {
      Properties newProperties = new Properties()
      propsFile.withInputStream {
         newProperties.load(it)
      }
      
      // Loop through the loaded properties, overwriting any values already existing
      newProperties.each{ prop ->
         propertiesObj[prop.key] = newProperties[prop.key]
      }
   }
   return propertiesObj
}

// Copies over a list of dependencies
// Usage: Define a list called "ext.dependencies" in the main project build.gradle
// who's contents are the projects to be copied over
task copyDependencies << {
   project.ext.dependencies.each { dependency ->
      project.copy {
         from "${project.projectDir}${File.separator}..${File.separator}${dependency}"
         into "${project.buildDir}${File.separator}${dependency}"
      }
      println "Copying ${project.projectDir}${File.separator}..${File.separator}${dependency} into ${project.buildDir}${File.separator}${dependency}"
   }
}

// Copy the project's sources into the build directory
// (don't copy the build directory itself though)
task copySources(type:Copy) {
   from "${project.projectDir}"
   into "${project.buildDir}${File.separator}"
   exclude "build"
}

// Parses any file in the output directory with *.template
// First looks in the automation-utilities repo for replacements,
// then in the project's repo, then in the user's home directory
// for a file called "replacement.properties"
// If found, replaces values found in that file with values from the loaded file
task parseTemplates() << {
   def templateFiles = fileTree("${project.buildDir}") {
      include "**/*.template"
   }

   // Load replacement.properties from the automation-utilities repo
   Properties props = new Properties()
   File repoReplacements = new File("${projectDir}${File.separator}..${File.separator}automation-utilities${File.separator}replacement.properties")
   props = loadProperties(repoReplacements,props)
   // Load replacement.properties from the project repo and
   // replace any properties found in automation-utilities
   File projectReplacements = new File("${project.projectDir}${File.separator}replacement.properties")
   props = loadProperties(projectReplacements,props)
   // Load replacement.properties from the user's home repo
   def homeDir = System.getProperty("user.home")
   File homeReplacements = new File("${homeDir}${File.separator}.replacement.properties")
   props = loadProperties(homeReplacements,props)
   
   println "Using properties "+props
   //  Apply the replacement properties to the template files
   templateFiles.files.each { file->
      project.copy {
         from file
         into project.buildDir
         rename {"${file}" - '.template'}
         expand([
            props
         ])
      }
   }
}

// Deletes the output directory of the project
task clean(type:Delete) {
   delete "${project.buildDir}"
   
   doFirst {
      println "Deleting ${project.buildDir}"
   }
}

// Task that executes a Docker container in the daemon
task runDockerContainer(type: Exec) {
   workingDir "${project.buildDir}"
   executable "docker"
   args "run -d --net=host ${project.name}".split()
}

// Task that builds a docker container using the project's
// build directory as a context
task deployDockerApplication(type: Exec) {
   workingDir "${project.buildDir}"
   executable "docker"
   args "build -t ${project.name} .".split()
}

// empty build task. Child projects should override this
task build

// empty run task. Child projects should override this
task run

// empty deployment task. Deploys an application into
// an environment that does not have docker installed.
// Child projects should override this.
task deployNativeApplication

// deploy task. Child projects should override this
task deploy {
   if(isDockerAvailable()) {
      dependsOn deployDockerApplication
   }
   else {
      dependsOn deployNativeApplication
   }
}

// Executes a clean and build of the project
task rebuild {
   // This specifies a dependency tree of clean->build
   dependsOn clean
   dependsOn build
   build.mustRunAfter clean
}
