/*
   Helper tasks + classes for gradle builds
*/

// Copies over a list of dependencies
// Usage: Define a list called "ext.dependencies" in the main project build.gradle
// who's contents are the projects to be copied over
task copyDependencies << {
   project.ext.dependencies.each { dependency ->
      project.copy {
         from "${project.projectDir}${File.separator}..${File.separator}${dependency}"
         into "${project.buildDir}${File.separator}${dependency}"
      }
      println "Copying ${project.projectDir}${File.separator}..${File.separator}${dependency} into ${project.buildDir}${File.separator}${dependency}"
   }
}

// Copy the project's sources into the build directory
// (don't copy the build directory itself though)
task copySources(type:Copy) {
   from "${project.projectDir}"
   into "${project.buildDir}${File.separator}"
   exclude "build"
}

// Parses any file in the output directory with *.template
task parseTemplates() << {
   def templateFiles = fileTree("${project.buildDir}") {
      include "**/*.template"
   }

   templateFiles.files.each { file->
      project.copy {
         from file
         into project.buildDir
         rename {"${file}" - '.template'}
         expand([
            testVal: 'this-is-a-test'
         ])
      }
   }
}

// Deletes the output directory of the project
task clean(type:Delete) {
   delete "${project.buildDir}"
   
   doFirst {
      println "Deleting ${project.buildDir}"
   }
}

// Task that builds a docker container using the project's
// build directory as a context
task createDockerContainer(type: Exec) {
   workingDir "${project.buildDir}"
   executable "docker"
   args "build -t ${project.name} .".split()
}

// empty build task. Child projects should override this
task build

// Executes a clean and build of the project
task rebuild {
   // This specifies a dependency tree of clean->build
   dependsOn clean
   dependsOn build
   build.mustRunAfter clean
}
