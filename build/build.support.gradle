/*
   Helper tasks + classes for gradle builds
*/

apply from: "${project.projectDir}${File.separator}..${File.separator}automation-utilities${File.separator}build${File.separator}build.properties.gradle"

// Define dependencies to copy over in the copyDependencies task
ext.dependencies = []

// list of executables that must be available to use the service if docker is not installed
ext.requiredNativeExecutables = []

// Checks if a particular executable is available
def isExecutableAvailable(String exeName) {
	try {
      Runtime rt = Runtime.getRuntime()
      rt.exec(exeName)
      return true;
   }
   catch(Exception ex) {
      return false;
   }
}

// Checks if all native executables are available
def checkAllExecutables(List<String> requiredExes) {
	List<String> failedExecutables = new ArrayList<String>()
	boolean foundAllExes = true
	
	requiredExes.each { exe ->
		if(!isExecutableAvailable(exe)) {
			failedExecutables.add(exe)
			foundAllExes = false
		}
	}
	
	if(!foundAllExes){
		println "The following executables are not present on this system: ${failedExecutables}"
	}
	
	return foundAllExes
}

// Copies over a list of dependencies
// Usage: Define a list called "ext.dependencies" in the main project build.gradle
// who's contents are the projects to be copied over
task copyDependencies << {
   project.ext.dependencies.each { dependency ->
      project.copy {
         from "${project.projectDir}${File.separator}..${File.separator}${dependency}"
         into "${project.buildDir}${File.separator}${dependency}"
      }
      println "Copying ${project.projectDir}${File.separator}..${File.separator}${dependency} into ${project.buildDir}${File.separator}${dependency}"
   }
}

// Copy the project's sources into the build directory
// (don't copy the build directory itself though)
task copySources(type:Copy) {
   from "${project.projectDir}"
   into "${project.buildDir}${File.separator}"
   exclude "build"
}

// Deletes the output directory of the project
task clean(type:Delete) {
   delete "${project.buildDir}"
   
   doFirst {
      println "Deleting ${project.buildDir}"
   }
}

// Task that executes a Docker container in the daemon
task runDockerApplication(type: Exec) {
   workingDir "${project.buildDir}"
   executable "docker"
   args "run -d --net=host ${project.name}".split()
}
runDockerApplication << {
	println "\'docker\' is available, running docker container"
}

// Runs a native application, child projects should override
task runNativeApplication(dependsOn: 'verifyNativeExecutables') << {
	println "\'docker\' is not available, running native application"
}

// Task that builds a docker container using the project's
// build directory as a context
task deployDockerApplication(type: Exec) {
   workingDir "${project.buildDir}"
   executable "docker"
   args "build -t ${project.name} .".split()
}
deployDockerApplication << {
	println "\'docker\' is available, creating docker container"
}

// empty deployment task. Deploys an application into
// an environment that does not have docker installed.
// Child projects should override this.
task deployNativeApplication(dependsOn: 'verifyNativeExecutables') << {
	println "\'docker\' is not available, creating native application"
}

// Empty termination task. Terminates an application not running in a 
// docker container
task terminateNativeApplication(dependsOn: 'verifyNativeExecutables') << {
	println "\'docker\' is not available. Terminating native application"
}

// Terminates an application running in a docker container
task terminateDockerApplication << {
	println "\'docker\' is available. Terminating docker application"
}

// Verify all executables needed for native deployment are present
task verifyNativeExecutables << {
	if(!checkAllExecutables(project.ext.requiredNativeExecutables)) {
		throw new GradleException("Required executables not present")
	}
}

// empty build task. Child projects should override this
task build

// empty run task. Child projects should override this
task run {
	if(isExecutableAvailable('docker')) {
		dependsOn runDockerApplication
	}
	else {
		dependsOn runNativeApplication
	}
}

// deploy task. Child projects should override this
task deploy {
   if(isExecutableAvailable('docker')) {
      dependsOn deployDockerApplication
   }
   else {
      dependsOn deployNativeApplication
   }
}

// Terminates a running application.
// Child projects should override terminateNativeApplication
task terminate {
   if(isExecutableAvailable('docker')) {
      dependsOn terminateDockerApplication
   }
   else {
      dependsOn terminateNativeApplication
   }
}

// Executes a clean and build of the project
task rebuild {
   // This specifies a dependency tree of clean->build
   dependsOn clean
   dependsOn build
   build.mustRunAfter clean
}
